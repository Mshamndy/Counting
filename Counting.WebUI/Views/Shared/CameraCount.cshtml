@model Counting.Domain.Entities.Camera
<li class="col-lg-4 col-sm-4 col-xs-6" st>






    <div class="well" style="width:330px; height:370px; margin-top:10px; background-color:Highlight;border-radius:20px;border-width:5px;">
        <div id="container" align="left">

            <video style="background: black url(loader.gif) center no-repeat;border-radius:inherit" id="video" width="280" height="170" autoplay="" playsinline="" muted="" controls=""></video>

        </div>
        <div>

            <span class="label label-warning" style="font-size:15px; margin-left:90px; "> @Model.Name</span>
            @*<span> @Html.LabelFor(m => m.CountIN, new { @class = "form-control" })</span>*@
        </div>
        <br />
        <div>

            <span class=" label label-default" style="font-size:15px;   margin-left:60px; ">Count IN @*@Model.CountOut*@</span>
            <span class="label label-danger" style="font-size:15px; margin-left:20px"> 1550</span>
        </div>
        <br />

        <div>
            <span class=" label label-default" style="font-size:15px;margin-left:60px ">Count Out  @*@Model.CountIN*@</span>
            <span class="label label-danger" style="font-size:15px; margin-left:10px"> 1600</span>
        </div>
        <br />

        <span class="label label-primary" style="font-size:15px; margin-left:60px"> @DateTime.Now</span>

        <button id="start" onclick="start()">Start</button>
        <button id="stop" style="display: none" onclick="stop()">Stop</button>


    </div>

</li>

<script >



                @*webrtcPlayer = new UnrealWebRTCPlayer("@Model.Alias","@Model.Alias", "", "10.0.15.175", "@Model.Port", false, true, "tcp");

                //Comment out next line not to start playing when webpage loads. Then user will need to click on Play button to play; you may want to use a video element with overlayed Play button - check out our SDK for sample webpages.
                webrtcPlayer.Play();    //Start playing automatically when webpage loads. Notice that video element has a "muted" attribute; this is video-only stream anyway. A muted attribute helps to overcome Chrome's autoplay policy, and is not always needed, as described in http://www.umediaserver.net/phpBB3/viewtopic.php?f=29&t=3578*@
    var pc = null;

    function negotiate() {
        pc.addTransceiver('video', { direction: 'recvonly' });
        pc.addTransceiver('audio', { direction: 'recvonly' });
        return pc.createOffer().then(function (offer) {
            return pc.setLocalDescription(offer);
        }).then(function () {
            // wait for ICE gathering to complete
            return new Promise(function (resolve) {
                if (pc.iceGatheringState === 'complete') {
                    resolve();
                } else {
                    function checkState() {
                        if (pc.iceGatheringState === 'complete') {
                            pc.removeEventListener('icegatheringstatechange', checkState);
                            resolve();
                        }
                    }
                    pc.addEventListener('icegatheringstatechange', checkState);
                }
            });
        }).then(function () {
            var offer = pc.localDescription;
            return fetch('http://10.0.60.158:8080/offer', {
                body: JSON.stringify({
                    sdp: offer.sdp,
                    type: offer.type,
                }),
                headers: {
                    'Content-Type': 'application/json'
                },
                method: 'POST'
            });
        }).then(function (response) {
            return response.json();
        }).then(function (answer) {
            return pc.setRemoteDescription(answer);
        }).catch(function (e) {
            alert(e);
        });
    }

    function start() {
        document.getElementById('start').style.display = 'none';
      
        document.getElementById('stop').style.display = 'inline-block';
        var config = {
            sdpSemantics: 'unified-plan'
        };

        if (document.getElementById('use-stun').checked) {
            config.iceServers = [{ urls: ['stun:stun.l.google.com:19302'] }];
        }

        pc = new RTCPeerConnection(config);

        // connect audio / video
        pc.addEventListener('track', function (evt) {
            if (evt.track.kind == 'video') {
                document.getElementById('video').srcObject = evt.streams[0];
            } else {
                document.getElementById('audio').srcObject = evt.streams[0];
            }
        });

       
        negotiate();
      
    }

    function stop() {
        document.getElementById('stop').style.display = 'none';

        // close peer connection
        setTimeout(function () {
            pc.close();
        }, 500);
    }

</script>